name: Deploy Secured Build to Production

on:
  push:
    branches: [dev]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
    - name: Checkout dev branch
      uses: actions/checkout@v4
      with:
        ref: dev
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install build dependencies
      run: |
        npm install -g javascript-obfuscator html-minifier-terser

    - name: Build secure version
      run: |
        echo "üîí Building secure production version..."

        # Create dist directory for secure build
        mkdir -p dist/js dist/mockups dist/branva/js dist/branva/css dist/branva/data/strategies dist/branva/insight-tools dist/branva/spec

        # Obfuscate JavaScript files with high security settings
        echo "üîê Obfuscating JavaScript files..."

        # Main app files (highest security)
        javascript-obfuscator js/main.js \
          --output dist/js/main.js \
          --compact true \
          --control-flow-flattening true \
          --control-flow-flattening-threshold 0.75 \
          --dead-code-injection true \
          --dead-code-injection-threshold 0.4 \
          --string-array true \
          --string-array-encoding 'rc4' \
          --string-array-threshold 0.75 \
          --unicode-escape-sequence true || echo "main.js not found, skipping"

        # Auth file (maximum security)
        javascript-obfuscator js/auth.js \
          --output dist/js/auth.js \
          --compact true \
          --control-flow-flattening true \
          --control-flow-flattening-threshold 0.9 \
          --dead-code-injection true \
          --dead-code-injection-threshold 0.6 \
          --string-array true \
          --string-array-encoding 'rc4' \
          --string-array-threshold 0.9 \
          --unicode-escape-sequence true || echo "auth.js not found, skipping"

        # Obfuscate all other JS files
        for jsfile in js/*.js; do
          if [ -f "$jsfile" ] && [ "$jsfile" != "js/main.js" ] && [ "$jsfile" != "js/auth.js" ]; then
            filename=$(basename "$jsfile")
            echo "üîê Obfuscating $filename..."
            javascript-obfuscator "$jsfile" \
              --output "dist/js/$filename" \
              --compact true \
              --control-flow-flattening true \
              --control-flow-flattening-threshold 0.75 \
              --dead-code-injection true \
              --dead-code-injection-threshold 0.4 \
              --string-array true \
              --string-array-encoding 'rc4' \
              --string-array-threshold 0.75
          fi
        done

        # Obfuscate mockups JS files if they exist
        if [ -d "mockups" ]; then
          for jsfile in mockups/*.js; do
            if [ -f "$jsfile" ]; then
              filename=$(basename "$jsfile")
              echo "üîê Obfuscating mockups/$filename..."
              javascript-obfuscator "$jsfile" \
                --output "dist/mockups/$filename" \
                --compact true \
                --control-flow-flattening true \
                --string-array true
            fi
          done
        fi

        # Obfuscate Branva JS files if they exist
        if [ -d "branva/js" ]; then
          echo "üîê Obfuscating Branva JavaScript files..."
          for jsfile in branva/js/*.js; do
            if [ -f "$jsfile" ]; then
              filename=$(basename "$jsfile")
              echo "üîê Obfuscating branva/js/$filename..."
              javascript-obfuscator "$jsfile" \
                --output "dist/branva/js/$filename" \
                --compact true \
                --control-flow-flattening true \
                --control-flow-flattening-threshold 0.75 \
                --dead-code-injection true \
                --dead-code-injection-threshold 0.4 \
                --string-array true \
                --string-array-encoding 'rc4' \
                --string-array-threshold 0.75
            fi
          done
        fi

        # Obfuscate Branva JS files in format-property subdirectory
        if [ -d "branva/js/format-property" ]; then
          echo "üîê Obfuscating Branva format-property JavaScript files..."
          mkdir -p dist/branva/js/format-property
          for jsfile in branva/js/format-property/*.js; do
            if [ -f "$jsfile" ]; then
              filename=$(basename "$jsfile")
              echo "üîê Obfuscating branva/js/format-property/$filename..."
              javascript-obfuscator "$jsfile" \
                --output "dist/branva/js/format-property/$filename" \
                --compact true \
                --control-flow-flattening true \
                --control-flow-flattening-threshold 0.75 \
                --dead-code-injection true \
                --dead-code-injection-threshold 0.4 \
                --string-array true \
                --string-array-encoding 'rc4' \
                --string-array-threshold 0.75
            fi
          done
        fi

        # Obfuscate insight-tools JavaScript files
        if [ -d "branva/insight-tools" ]; then
          echo "üîê Obfuscating insight-tools JavaScript files..."
          for tooldir in branva/insight-tools/*/; do
            if [ -d "$tooldir" ] && [ -d "${tooldir}js" ]; then
              toolname=$(basename "$tooldir")
              echo "üîê Processing insight tool: $toolname"
              mkdir -p "dist/branva/insight-tools/$toolname/js"
              for jsfile in "${tooldir}js"/*.js; do
                if [ -f "$jsfile" ]; then
                  filename=$(basename "$jsfile")
                  echo "üîê Obfuscating insight-tools/$toolname/js/$filename..."
                  javascript-obfuscator "$jsfile" \
                    --output "dist/branva/insight-tools/$toolname/js/$filename" \
                    --compact true \
                    --control-flow-flattening true \
                    --control-flow-flattening-threshold 0.75 \
                    --dead-code-injection true \
                    --dead-code-injection-threshold 0.4 \
                    --string-array true \
                    --string-array-encoding 'rc4' \
                    --string-array-threshold 0.75
                fi
              done
            fi
          done
        fi

        # Minify HTML files
        echo "üìÑ Minifying HTML files..."
        for htmlfile in *.html; do
          if [ -f "$htmlfile" ]; then
            echo "üìÑ Minifying $htmlfile..."
            html-minifier-terser \
              --collapse-whitespace \
              --remove-comments \
              --minify-css true \
              --minify-js true \
              "$htmlfile" -o "dist/$htmlfile"
          fi
        done

        # Minify Branva HTML file
        if [ -f "branva/index.html" ]; then
          echo "üìÑ Minifying branva/index.html..."
          html-minifier-terser \
            --collapse-whitespace \
            --remove-comments \
            --minify-css true \
            --minify-js true \
            branva/index.html -o dist/branva/index.html
        fi

        # Minify insight-tools HTML templates
        if [ -d "branva/insight-tools" ]; then
          echo "üìÑ Minifying insight-tools HTML templates..."
          for tooldir in branva/insight-tools/*/; do
            if [ -d "$tooldir" ]; then
              toolname=$(basename "$tooldir")
              if [ -f "${tooldir}template.html" ]; then
                echo "üìÑ Minifying insight-tools/$toolname/template.html..."
                mkdir -p "dist/branva/insight-tools/$toolname"
                html-minifier-terser \
                  --collapse-whitespace \
                  --remove-comments \
                  --minify-css true \
                  --minify-js true \
                  "${tooldir}template.html" -o "dist/branva/insight-tools/$toolname/template.html"
              fi
              if [ -f "${tooldir}index.html" ]; then
                echo "üìÑ Minifying insight-tools/$toolname/index.html..."
                mkdir -p "dist/branva/insight-tools/$toolname"
                html-minifier-terser \
                  --collapse-whitespace \
                  --remove-comments \
                  --minify-css true \
                  --minify-js true \
                  "${tooldir}index.html" -o "dist/branva/insight-tools/$toolname/index.html"
              fi
            fi
          done
        fi

        # Copy other necessary files
        echo "üìã Copying assets..."
        [ -d "css" ] && cp -r css dist/ || echo "No css directory found"
        [ -d "images" ] && cp -r images dist/ || echo "No images directory found"
        [ -d "assets" ] && cp -r assets dist/ || echo "No assets directory found"
        [ -d "fonts" ] && cp -r fonts dist/ || echo "No fonts directory found"
        [ -d "data" ] && cp -r data dist/ || echo "No data directory found"
        [ -d "mockup-images" ] && cp -r mockup-images dist/ || echo "No mockup-images directory found"
        [ -d "videos" ] && cp -r videos dist/ || echo "No videos directory found"

        # Copy Branva assets
        echo "üìã Copying Branva assets..."
        [ -d "branva/css" ] && cp -r branva/css dist/branva/ || echo "No branva/css directory found"
        [ -d "branva/data" ] && cp -r branva/data dist/branva/ || echo "No branva/data directory found"
        [ -d "branva/images" ] && cp -r branva/images dist/branva/ || echo "No branva/images directory found"
        [ -d "branva/assets" ] && cp -r branva/assets dist/branva/ || echo "No branva/assets directory found"
        [ -d "branva/videos" ] && cp -r branva/videos dist/branva/ || echo "No branva/videos directory found"
        [ -d "branva/mockup-images" ] && cp -r branva/mockup-images dist/branva/ || echo "No branva/mockup-images directory found"
        [ -d "branva/spec" ] && cp -r branva/spec dist/branva/ || echo "No branva/spec directory found"

        # Copy insight-tools with all non-JS files (CSS, HTML, images, etc.)
        if [ -d "branva/insight-tools" ]; then
          echo "üìã Copying insight-tools assets..."
          for tooldir in branva/insight-tools/*/; do
            if [ -d "$tooldir" ]; then
              toolname=$(basename "$tooldir")
              echo "üìã Copying insight tool assets: $toolname"
              mkdir -p "dist/branva/insight-tools/$toolname"

              # Copy CSS files and directories
              if [ -d "${tooldir}css" ]; then
                cp -r "${tooldir}css" "dist/branva/insight-tools/$toolname/" || true
              fi

              # Copy any loose CSS files
              for cssfile in "${tooldir}"*.css; do
                if [ -f "$cssfile" ]; then
                  cp "$cssfile" "dist/branva/insight-tools/$toolname/" || true
                fi
              done

              # Copy other asset directories
              if [ -d "${tooldir}images" ]; then
                cp -r "${tooldir}images" "dist/branva/insight-tools/$toolname/" || true
              fi
              if [ -d "${tooldir}assets" ]; then
                cp -r "${tooldir}assets" "dist/branva/insight-tools/$toolname/" || true
              fi

              # Copy any other files (but HTML will be minified separately above)
              for file in "${tooldir}"*; do
                if [ -f "$file" ] && [[ ! "$file" =~ \.(js|html)$ ]]; then
                  filename=$(basename "$file")
                  cp "$file" "dist/branva/insight-tools/$toolname/$filename" || true
                fi
              done
            fi
          done
        fi

        # Copy mockups HTML if exists
        if [ -f "mockups/index.html" ]; then
          mkdir -p dist/mockups
          html-minifier-terser \
            --collapse-whitespace \
            --remove-comments \
            --minify-css true \
            --minify-js true \
            mockups/index.html -o dist/mockups/index.html
        fi

        echo "‚úÖ Secure build completed!"
        echo "üìÅ Contents of dist directory:"
        ls -la dist/

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Deploy to main branch
      run: |
        echo "üöÄ Deploying to main branch..."

        # Backup dist directory before switching branches
        echo "üíæ Backing up dist directory..."
        cp -r dist /tmp/deploy_backup

        # Switch to main branch
        git checkout main

        # Pull latest main to ensure we're up to date
        git pull origin main

        # Clear main branch (keep only git files)
        echo "üßπ Clearing main branch for fresh deployment..."
        find . -mindepth 1 -maxdepth 1 ! -name '.git' ! -name '.gitignore' -exec rm -rf {} \; || true

        # Copy secure build files from backup
        echo "üìÅ Copying secure build files to main branch..."
        if [ "$(ls -A /tmp/deploy_backup 2>/dev/null)" ]; then
          cp -r /tmp/deploy_backup/* ./
          echo "‚úÖ Secured files copied successfully"
        else
          echo "‚ùå No files found in backup directory"
          exit 1
        fi

        # Add all files to git
        git add .

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No changes to deploy"
        else
          # Commit with deployment message
          git commit -m "Deploy secured build to production" \
                     -m "" \
                     -m "üîí Security features:" \
                     -m "- JavaScript obfuscated with RC4 encoding" \
                     -m "- HTML minified and optimized" \
                     -m "- Dead code injection enabled" \
                     -m "- Control flow flattening applied" \
                     -m "- Only production-ready files included" \
                     -m "" \
                     -m "ü§ñ Auto-deployed from dev branch via GitHub Actions" \
                     -m "üìÖ $(date -u '+%Y-%m-%d %H:%M:%S UTC')" \
                     -m "" \
                     -m "Co-Authored-By: GitHub Actions <actions@github.com>"

          # Push to main branch
          echo "üåç Pushing to main branch..."
          git push origin main

          echo "üéâ SUCCESS! Secured build deployed to production!"
          echo "üîó Production URL: https://ravi-cloudworks.github.io/strategy-staaar/"
          echo "‚è±Ô∏è Changes will be live in a few minutes"
        fi

    - name: Cleanup
      run: |
        echo "üßπ Deployment completed!"
        echo ""
        echo "üîí SECURITY CHECKLIST - Complete these in Supabase Dashboard:"
        echo "   1. Run SQL from supabase-rls-setup.sql in SQL Editor"
        echo "   2. Auth ‚Üí URL Configuration ‚Üí Site URL: https://ravi-cloudworks.github.io"
        echo "   3. Auth ‚Üí Redirect URLs ‚Üí Add only: https://ravi-cloudworks.github.io/**"
        echo ""
        echo "üì± LinkedIn OAuth Configuration:"
        echo "   1. LinkedIn Developer Portal ‚Üí Your App ‚Üí Auth"
        echo "   2. Remove all redirect URLs except GitHub Pages domain"
        echo "   3. Test login flow after deployment"